function create_fasta_full() {
  local file_name="$1"
  local file_prefix="${file_name%_percentage.gff*}"
  local arg="$2"
  if [ "$arg" = "14" ]; then
    python2.7 /home/earmenteros/mEpigram/bedToFasta.py -f <(awk -F "\t" 'BEGIN{OFS="\t"}{print "NC_000913.3 Escherichia coli str. K-12 substr. MG1655, complete genome",$4-3,$5+11,$7,$6}' "${file_name}") -r /home/earmenteros/reference_genome/sequence.fasta -o x && awk '/^>/{print ">seq_" ++i; next}{print}' x > "${file_prefix}_seq_14_full.fa"
  elif [ "$arg" = "4" ]; then
    python2.7 /home/earmenteros/mEpigram/bedToFasta.py -f <(awk -F "\t" 'BEGIN{OFS="\t"}{print "NC_000913.3 Escherichia coli str. K-12 substr. MG1655, complete genome",$4-2,$5+2,$7,$6}' "${file_name}") -r /home/earmenteros/reference_genome/sequence.fasta -o x && awk '/^>/{print ">seq_" ++i; next}{print}' x > "${file_prefix}_seq_4_full.fa"
  elif [ "$arg" = "22" ]; then
    python2.7 /home/earmenteros/mEpigram/bedToFasta.py -f <(awk -F "\t" 'BEGIN{OFS="\t"}{print "NC_000913.3 Escherichia coli str. K-12 substr. MG1655, complete genome",$4-11,$5+11,$7,$6}' "${file_name}") -r /home/earmenteros/reference_genome/sequence.fasta -o x && awk '/^>/{print ">seq_" ++i; next}{print}' x > "${file_prefix}_seq_22_full.fa"
  elif [ "$arg" = "5" ]; then
    python2.7 /home/earmenteros/mEpigram/bedToFasta.py -f <(awk -F "\t" 'BEGIN{OFS="\t"}{print "NC_000913.3 Escherichia coli str. K-12 substr. MG1655, complete genome",$4-2,$5+3,$7,$6}' "${file_name}") -r /home/earmenteros/reference_genome/sequence.fasta -o x && awk '/^>/{print ">seq_" ++i; next}{print}' x > "${file_prefix}_seq_5_full.fa"
  elif [ "$arg" = "6" ]; then
    python2.7 /home/earmenteros/mEpigram/bedToFasta.py -f <(awk -F "\t" 'BEGIN{OFS="\t"}{print "NC_000913.3 Escherichia coli str. K-12 substr. MG1655, complete genome",$4-2,$5+4,$7,$6}' "${file_name}") -r /home/earmenteros/reference_genome/sequence.fasta -o x && awk '/^>/{print ">seq_" ++i; next}{print}' x > "${file_prefix}_seq_6_full.fa"
  else
    echo "Invalid argument. The second argument must be either 4, 5, 14 or 22."
    return 1
  fi

  rm x
  echo "Fasta file created successfully as ${file_prefix}_seq_${arg}_full.fa"
}


function create_fasta_filtered() {
  local file_name="$1"
  local file_prefix="${file_name%.bed}"
  local arg="$2"
  if [ "$arg" = "14" ]; then
    python2.7 /home/earmenteros/mEpigram/bedToFasta.py -f <(awk -F '\t' 'BEGIN{OFS="\t"}{print "NC_000913.3 Escherichia coli str. K-12 substr. MG1655, complete genome",$2-2,$3+11,$4,$5}' "${file_name}") -r /home/earmenteros/reference_genome/sequence.fasta -o x && awk '/^>/{print ">seq_" ++i; next}{print}' x > "${file_prefix}_seq_14_filtered.fa"
  elif [ "$arg" = "4" ]; then
    python2.7 /home/earmenteros/mEpigram/bedToFasta.py -f <(awk -F '\t' 'BEGIN{OFS="\t"}{print "NC_000913.3 Escherichia coli str. K-12 substr. MG1655, complete genome",$2-1,$3+2,$4,$5}' "${file_name}") -r /home/earmenteros/reference_genome/sequence.fasta -o x && awk '/^>/{print ">seq_" ++i; next}{print}' x > "${file_prefix}_seq_4_filtered.fa"
  elif [ "$arg" = "5" ]; then
    python2.7 /home/earmenteros/mEpigram/bedToFasta.py -f <(awk -F '\t' 'BEGIN{OFS="\t"}{print "NC_000913.3 Escherichia coli str. K-12 substr. MG1655, complete genome",$2-1,$3+3,$4,$5}' "${file_name}") -r /home/earmenteros/reference_genome/sequence.fasta -o x && awk '/^>/{print ">seq_" ++i; next}{print}' x > "${file_prefix}_seq_5_filtered.fa"
  elif [ "$arg" = "22" ]; then
    python2.7 /home/earmenteros/mEpigram/bedToFasta.py -f <(awk -F '\t' 'BEGIN{OFS="\t"}{print "NC_000913.3 Escherichia coli str. K-12 substr. MG1655, complete genome",$2-10,$3+11,$4,$5}' "${file_name}") -r /home/earmenteros/reference_genome/sequence.fasta -o x && awk '/^>/{print ">seq_" ++i; next}{print}' x > "${file_prefix}_seq_22_filtered.fa"
  elif [ "$arg" = "6" ]; then
    python2.7 /home/earmenteros/mEpigram/bedToFasta.py -f <(awk -F "\t" 'BEGIN{OFS="\t"}{print "NC_000913.3 Escherichia coli str. K-12 substr. MG1655, complete genome",$4-2,$5+4,$7,$6}' "${file_name}") -r /home/earmenteros/reference_genome/sequence.fasta -o x && awk '/^>/{print ">seq_" ++i; next}{print}' x > "${file_prefix}_seq_6_filtered.fa"
  else
    echo "Invalid argument. The second argument must be either 4, 5, 6 or 22."
    return 1
  fi

  rm x
  echo "Fasta file created successfully as ${file_prefix}_seq_${arg}_filtered.fa"
}


#For BSEq:
$create_fasta_filtered <clone_1/2_intersection_full.bed> 22
$create_fasta_filtered <clone_1/2_intersection_filtered.bed> 22
$mv <clone_1/2_intersection_full_seq_22_filtered.fa>  <BSeq_1/2_full.fa>
$mv <clone_1/2_intersection_filtered_seq_22_filtered.fa>  <BSeq_1/2_filtered.fa>


#For pacbio
$create_fasta_full <input percentage.gff> 22
$create_fasta_filtered <input bed> 22

## files go to RSAT prokaryotes pattern matching dna-pattern 

with streme find motifs in the fasta sequences that were not mathching the other motifs
$streme --evalue --p <no_motif_full.fa> --oc <no_motif_full>
